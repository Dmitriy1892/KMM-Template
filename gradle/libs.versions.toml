[versions]

compileSdk = "34"
targetSdk = "34"
minSdk = "23"

iosTarget = "14.1"

java = "17"

kotlin = "1.9.20"
agp = "8.1.3"

google-ksp = "1.9.20-1.0.13"

# Android
androidx-appcompat = "1.6.1"
androidx-core = "1.12.0"
androidx-crypto = "1.1.0-alpha06"
androidx-exifinterface = "1.3.6"
androidx-fragment = "1.6.2"
androidx-lifecycle = "2.6.2"
androidx-preferences-datastore = "1.1.0-alpha06"

google-material = "1.10.0"

# Compose Android
androidx-activityCompose = "1.8.0"
androidx-compose = "1.5.4"
androidx-compose-compiler = "1.5.4"
androidx-compose-uitooling = "1.5.4"
androidx-navigation-compose = "2.7.5"

# Compose Multiplatform
compose-multiplatform = "1.5.10"
composeImageLoader = "1.6.8"
decompose = "2.2.0-compose-experimental-alpha04"
decompose-essenty = "1.3.0-alpha03"

# Kotlin
kotlinx-atomicfu = "0.22.0"
kotlinx-coroutines = "1.7.3"
kotlinx-datetime = "0.4.1"
kotlinx-immutablecollections = "0.3.6"
kotlinx-serialization = "1.6.0"

# Koin
koin = "3.5.0"
koin-android = "3.5.0"
koin-annotations = "1.3.0"
koin-ksp = "1.3.0"
koin-test = "3.5.0"

# Ktor
ktor = "2.3.5"
ktorfit = "1.9.1"

# SQL
sqlDelight = "2.0.0"
sqlCipher = "4.5.4"
sqliter = "1.2.3"

crypto-kmp-diglol = "0.1.5"
moko-resources = "0.23.0"
napier = "2.6.1"
skie = "0.5.3"

# KMM libs
kmm-utils = "0.0.5"
kmm-mvvm = "0.0.6"
kmm-mvi = "0.0.2"

## Testing
androidx-test-runner = "1.5.2"

[plugins]

android-application = { id = "com.android.application", version.ref = "agp" }
android-library = { id = "com.android.library", version.ref = "agp" }

compose-multiplatform = { id = "org.jetbrains.compose", version.ref = "compose-multiplatform" }

google-ksp = { id = "com.google.devtools.ksp", version.ref = "google-ksp" }

kotlin-multiplatform = { id = "org.jetbrains.kotlin.multiplatform", version.ref = "kotlin" }
kotlinx-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }

ktorfit = { id = "de.jensklingenberg.ktorfit", version.ref = "ktorfit" }
moko-resources = { id = "dev.icerock.mobile.multiplatform-resources", version.ref = "moko-resources" }
skie = { id = "co.touchlab.skie", version.ref = "skie" }
sqlDelight = { id = "app.cash.sqldelight", version.ref = "sqlDelight" }

[libraries]

# Gradle plugins
gradleplugins-android = { module = "com.android.tools.build:gradle", version.ref = "agp" }
gradleplugins-compose = { module = "org.jetbrains.compose:compose-gradle-plugin", version.ref = "compose-multiplatform" }
gradleplugins-google-ksp = { module = "com.google.devtools.ksp:com.google.devtools.ksp.gradle.plugin", version.ref = "google-ksp" }
gradleplugins-kotlin = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlin" }
gradleplugins-kotlinx-serialization = { module = "org.jetbrains.kotlin:kotlin-serialization", version.ref = "kotlin" }
gradleplugins-moko-resources = { module = "dev.icerock.moko:resources-generator", version.ref = "moko-resources" }

# Android libs
androidx-appcompat = { module = "androidx.appcompat:appcompat", version.ref = "androidx-appcompat" }
androidx-core = { module = "androidx.core:core-ktx", version.ref = "androidx-core" }
androidx-crypto = { module = "androidx.security:security-crypto-ktx", version.ref = "androidx-crypto" }
androidx-exifinterface = { group = "androidx.exifinterface", name = "exifinterface", version.ref = "androidx-exifinterface" }
androidx-fragment = { module = "androidx.fragment:fragment-ktx", version.ref = "androidx-fragment" }
androidx-lifecycle-process = { module = "androidx.lifecycle:lifecycle-process", version.ref = "androidx-lifecycle" }
androidx-lifecycle-runtime = { module = "androidx.lifecycle:lifecycle-runtime-ktx", version.ref = "androidx-lifecycle" }
androidx-lifecycle-viewmodel = { module = "androidx.lifecycle:lifecycle-viewmodel-ktx", version.ref = "androidx-lifecycle" }
androidx-preferences-datastore = { module = "androidx.datastore:datastore-preferences-core", version.ref = "androidx-preferences-datastore" }

google-material = { module = "com.google.android.material:material", version.ref = "google-material" }

# Android Compose libs
androidx-activityCompose = { module = "androidx.activity:activity-compose", version.ref = "androidx-activityCompose" }
androidx-compose-ui = { module = "androidx.compose.ui:ui", version.ref = "androidx-compose" }
androidx-compose-foundation = { module = "androidx.compose.foundation:foundation", version.ref = "androidx-compose" }
androidx-compose-material = { module = "androidx.compose.material:material", version.ref = "androidx-compose" }
androidx-compose-preview = { module = "androidx.compose.ui:ui-tooling-preview", version.ref = "androidx-compose-uitooling" }
androidx-compose-uitooling = { module = "androidx.compose.ui:ui-tooling", version.ref = "androidx-compose-uitooling" }
androidx-lifecycle-compose-viewmodel = { module = "androidx.lifecycle:lifecycle-viewmodel-compose", version.ref = "androidx-lifecycle" }
androidx-lifecycle-runtime-compose = { module = "androidx.lifecycle:lifecycle-runtime-compose", version.ref = "androidx-lifecycle" }
androidx-navigation-compose = { module = "androidx.navigation:navigation-compose", version.ref = "androidx-navigation-compose" }

# Compose Multiplatform libs
composeImageLoader = { module = "io.github.qdsfdhvh:image-loader", version.ref = "composeImageLoader" }
decompose-core = { module = "com.arkivanov.decompose:decompose", version.ref = "decompose" }
decompose-compose-multiplatform = { module = "com.arkivanov.decompose:extensions-compose-jetbrains", version.ref = "decompose" }
decompose-essenty-lifecycle = { module = "com.arkivanov.essenty:lifecycle", version.ref = "decompose-essenty" }


# Kotlin libs
kotlinx-atomicfu = { module = "org.jetbrains.kotlinx:atomicfu", version.ref = "kotlinx-atomicfu" }
kotlinx-coroutines-android = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-android", version.ref = "kotlinx-coroutines" }
kotlinx-coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlinx-coroutines" }
kotlinx-datetime = { module = "org.jetbrains.kotlinx:kotlinx-datetime", version.ref = "kotlinx-datetime" }
kotlinx-immutablecollections = { module = "org.jetbrains.kotlinx:kotlinx-collections-immutable", version.ref = "kotlinx-immutablecollections" }
kotlinx-serialization-core = { module = "org.jetbrains.kotlinx:kotlinx-serialization-core", version.ref = "kotlinx-serialization" }

# Ktor libs
ktor-auth = { module = "io.ktor:ktor-client-auth", version.ref = "ktor" }
ktor-android = { module = "io.ktor:ktor-client-android", version.ref = "ktor" }
ktor-content-negotiation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }
ktor-core = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktor-darwin = { module = "io.ktor:ktor-client-darwin", version.ref = "ktor" }
ktor-json = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktor" }
ktor-ios = { module = "io.ktor:ktor-client-ios", version.ref = "ktor" }
ktor-logging = { module = "io.ktor:ktor-client-logging", version.ref = "ktor" }
ktor-okhttp = { module = "io.ktor:ktor-client-okhttp", version.ref = "ktor" }
ktor-serialization = { module = "io.ktor:ktor-client-serialization", version.ref = "ktor" }

ktorfit-ksp = { module = "de.jensklingenberg.ktorfit:ktorfit-ksp", version.ref = "ktorfit" }
ktorfit-lib = { module = "de.jensklingenberg.ktorfit:ktorfit-lib", version.ref = "ktorfit" }

# Koin libs
koin-android = { module = "io.insert-koin:koin-android", version.ref = "koin-android" }
koin-annotations = { module = "io.insert-koin:koin-annotations", version.ref = "koin-annotations" }
koin-core = { module = "io.insert-koin:koin-core", version.ref = "koin" }
koin-ksp-compiler = { module = "io.insert-koin:koin-ksp-compiler", version.ref = "koin-ksp" }

# SQL libs
sqlDelight-core = { module = "app.cash.sqldelight:runtime", version.ref = "sqlDelight" }
sqlDelight-extensions = { module = "app.cash.sqldelight:coroutines-extensions", version.ref = "sqlDelight" }
sqlDelight-driver-android = { module = "app.cash.sqldelight:android-driver", version.ref = "sqlDelight" }
sqlDelight-driver-ios = { module = "app.cash.sqldelight:native-driver", version.ref = "sqlDelight" }
sqlCipher-android = { module = "net.zetetic:android-database-sqlcipher", version.ref = "sqlCipher" }
sqliter-ios = { module = "co.touchlab:sqliter-driver", version.ref = "sqliter" }

crypto-kmp-diglol = { module = "com.diglol.crypto:crypto", version.ref = "crypto-kmp-diglol" }

moko-resources = { module = "dev.icerock.moko:resources", version.ref = "moko-resources" }
moko-resources-compose = { module = "dev.icerock.moko:resources-compose", version.ref = "moko-resources" }

napier = { module = "io.github.aakira:napier", version.ref = "napier" }
skie-annotations = { module = "co.touchlab.skie:configuration-annotations", version.ref = "skie" }

# KMM libs
kmm-utils = { module = "io.github.dmitriy1892.kmm:utils", version.ref = "kmm-utils" }
kmm-mvvm-core = { module = "io.github.dmitriy1892.kmm:mvvm-core", version.ref = "kmm-mvvm" }
kmm-mvvm-koin = { module = "io.github.dmitriy1892.kmm:mvvm-koin", version.ref = "kmm-mvvm" }
kmm-mvvm-compose = { module = "io.github.dmitriy1892.kmm:mvvm-compose", version.ref = "kmm-mvvm" }
kmm-mvi-core = { module = "io.github.dmitriy1892.kmm:mvi-core", version.ref = "kmm-mvi" }
kmm-mvi-android-mvvm = { module = "io.github.dmitriy1892.kmm:mvi-android-mvvm", version.ref = "kmm-mvi" }
kmm-mvi-kmm-mvvm = { module = "io.github.dmitriy1892.kmm:mvi-kmm-mvvm", version.ref = "kmm-mvi" }
kmm-mvi-compose-multiplatform = { module = "io.github.dmitriy1892.kmm:mvi-compose-multiplatform", version.ref = "kmm-mvi" }

# Testing libs
androidx-test-runner = { module = "androidx.test:runner", version.ref = "androidx-test-runner" }

kotlin-test-annotations-common = { module = "org.jetbrains.kotlin:kotlin-test-annotations-common", version.ref = "kotlin" }
kotlin-test-common = { module = "org.jetbrains.kotlin:kotlin-test-common", version.ref = "kotlin" }
kotlin-test-coroutines-common = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "kotlinx-coroutines" }
kotlin-test-junit = { module = "org.jetbrains.kotlin:kotlin-test-junit", version.ref = "kotlin" }

koin-test = { module = "io.insert-koin:koin-test", version.ref = "koin-test" }
koin-test-android = { module = "io.insert-koin:koin-android-test", version.ref = "koin-test" }

[bundles]

common-library = [
    "kotlinx-serialization-core", "kotlinx-coroutines-core", "kmm-utils"
]

ktor = [
    "ktor-core", "ktor-auth", "ktor-json", "ktor-serialization", "ktor-content-negotiation",
    "ktor-logging"
]

android-compose = [
    "androidx-compose-ui", "androidx-compose-uitooling", "androidx-compose-preview",
    "androidx-compose-foundation", "androidx-compose-material", "androidx-lifecycle-runtime-compose"
]

android-view = [
    "androidx-fragment", "google-material"
]

android-feature = [
    "androidx-core", "androidx-appcompat", "androidx-lifecycle-viewmodel",
    "androidx-lifecycle-runtime", "androidx-lifecycle-process"
]

common-feature = [
    "kmm-mvvm-core", "kmm-mvvm-koin", "kmm-mvvm-compose",
    "kmm-mvi-core", "kmm-mvi-kmm-mvvm", "kmm-mvi-compose-multiplatform",
    "decompose-core", "decompose-compose-multiplatform",
    "skie-annotations"
]